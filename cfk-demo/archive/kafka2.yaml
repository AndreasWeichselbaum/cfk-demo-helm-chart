apiVersion: platform.confluent.io/v1beta1
kind: Kafka
metadata:
  name: {{ include "confluent-platform.kafkaName" . }}
  labels:
    {{- include "mccs-common.labels.labels" . | nindent 4 }}
  annotations:
    platform.confluent.io/block-reconcile: {{ .Values.blockReconcile | quote }}
spec:
  {{- with .Values.kafka.configOverrides }}
  configOverrides:
  {{ . | toYaml | nindent 4 }}
  {{- end }}
  {{- with .Values.kafka.podTemplate }}
  podTemplate:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- if .Values.license.enabled }}
  license:
    secretRef: {{ include "confluent-platform.licenseSecretName" . }}
  {{- end }}
  replicas: {{ .Values.kafka.replicas }}
  image:
    {{- include "confluent-platform.imageHelper" .Values.kafka.image | nindent 4 }}
{{- with .Values.kafka.storageClass }}
  storageClass: {{ . | quote }}
{{- end }}
  dataVolumeCapacity: {{ .Values.kafka.dataVolumeCapacity | quote }}
  oneReplicaPerNode: {{ .Values.kafka.oneReplicaPerNode }}
{{- if .Values.kafka.metricReporter.enabled }}
  metricReporter:
    enabled: true
    # CfK autoconfigures the REPLICATOR:9072 listener as inter.broker.listener
    # If you are running Confluent Metrics Reporter on the same cluster that is running and hosting MDS, be aware that it cannot use tokens from the MDS server, so it must communicate with listeners that do not require MDS authentication. In this case, do not use the RBAC listener specified for the MDS instance. Instead, use the inter-broker listener specified
    # https://docs.confluent.io/platform/7.0.1/kafka/metrics-reporter.html#role-based-access-control
    bootstrapEndpoint: {{ include "confluent-platform.kafkaName" . }}.{{ include "mccs-common.common.clusterFQDN" .  }}:9072
    authentication:
      type: plain
      jaasConfig:
        secretRef: {{ include "confluent-platform.kafkaName" . }}-operator-creds
{{- end }}
  authorization:
    type: rbac
    superUsers:
      - User:su
  listeners:
    internal:
      authentication:
        type: plain
        jaasConfig:
          secretRef: {{ include "confluent-platform.kafkaName" . }}-internal-users
    {{- if .Values.kafka.customAccessEnabled }}
    custom:
    - name: kafka-ext
      port: 9093
      authentication:
        type: plain
        jaasConfig:
          secretRef: {{ include "confluent-platform.kafkaName" . }}-external-users
      {{- with .Values.kafka.customAccess }}
      externalAccess: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.kafka.externalTls.enabled }}
      tls:
        enabled: true
        secretRef: {{ include "confluent-platform.certificateSecretName" . }}
      {{- end }}
    {{- end }}
    external:
      {{- with .Values.kafka.externalAccess }}
      externalAccess: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.kafka.externalTls.enabled }}
      tls:
        enabled: true
        secretRef: {{ include "confluent-platform.certificateSecretName" . }}
      {{- end }}
      authentication:
        type: plain
        jaasConfig:
          secretRef: {{ include "confluent-platform.kafkaName" . }}-external-users
  services:
    mds:
      tls:
        enabled: false
      tokenKeyPair:
        secretRef: {{ include "mccs-common.names.fullname" . }}-mds-token-keypair
      authentication:
        type: bearer
      provider:
        type: ldap
        ldap:
          address: {{ .Values.kafka.mds.ldap.url }}
          authentication:
            type: simple
            simple:
              secretRef: {{ include "mccs-common.names.fullname" . }}-ldap-credential
          configurations:
            groupNameAttribute: cn
            groupObjectClass: group
            groupMemberAttribute: member
            groupMemberAttributePattern: CN=(.*),DC=mccs,DC=eliagroup,DC=eu
            groupSearchBase: dc=mccs,dc=eliagroup,dc=eu
            userNameAttribute: cn
            userMemberOfAttributePattern: CN=(.*),DC=mccs,DC=eliagroup,DC=eu
            userObjectClass: organizationalRole
            userSearchBase: dc=mccs,dc=eliagroup,dc=eu
  dependencies:
    kafkaRest:
      authentication:
        type: bearer
        bearer:
          secretRef: {{ include "mccs-common.names.fullname" . }}-su-mds-credential
    zookeeper:
      endpoint: {{ include "confluent-platform.zookeeperName" . }}.{{ include "mccs-common.common.clusterFQDN" .  }}:2181
      authentication:
        type: digest
        jaasConfig:
          secretRef: {{ include "mccs-common.names.fullname" . }}-kafka-digest-credential
    schemaRegistry:
      url: {{ include "confluent-platform.schemaRegistryUrl" .  }}
      authentication:
        type: basic
        basic:
          secretRef: {{ include "mccs-common.names.fullname" . }}-sr-plain-credential
{{- if .Values.global.monitoring.enabled }}
  metrics:
    prometheus:
      blacklist:
        - "kafka.consumer:type=*,id=*"
        - "kafka.consumer:type=*,client-id=*"
        - "kafka.consumer:type=*,client-id=*,node-id=*"
        - "kafka.producer:type=*,id=*"
        - "kafka.producer:type=*,client-id=*"
        - "kafka.producer:type=*,client-id=*,node-id=*"
        - "kafka.*:type=kafka-metrics-count,*"
        - "kafka.admin.client:type=*, node-id=*, client-id=*"
        - "kafka.admin.client:type=*, client-id=*"
        - "kafka.admin.client:type=*, id=*"
        - "kafka.admin.client:*"
        - "kafka.server:type=*,cipher=*,protocol=*,listener=*,networkProcessor=*"
        - "kafka.server:type=*"
        - "kafka.server:type=app-info,id=*"
        - "kafka.rest:*"
        - "rest.utils:*"
        - "io.confluent.common.security.jetty:*"
        - "io.confluent.rest:*"
        - "confluent.metadata.service:type=app-info,id=*"
        - "confluent.metadata.service:type=app-info,client-id=*"
        - "confluent.metadata:type=kafkaauthstore,*"
      rules:
        # This rule is more specific than the next rule; it has to come before it otherwise it will never be hit
        # "kafka.server:type=*,name=*, client-id=*, topic=*, partition=*"
        - pattern: kafka.server<type=(.+), name=(.+), clientId=(.+), topic=(.+), partition=(.*)><>Value
          name: kafka_server_$1_$2
          type: GAUGE
          labels:
            clientId: "$3"
            topic: "$4"
            partition: "$5"
        # This is by far the biggest contributor to the number of sheer metrics being produced.
        # Always keep it near the top for the case of probability when so many metrics will hit the first condition and exit.
        # "kafka.cluster:type=*, name=*, topic=*, partition=*"
        # "kafka.log:type=*,name=*, topic=*, partition=*"
        - pattern: kafka.(\w+)<type=(.+), name=(.+), topic=(.+), partition=(.+)><>Value
          name: kafka_$1_$2_$3
          type: GAUGE
          labels:
            topic: "$4"
            partition: "$5"
        # Next two rules are similar; Value version is a GAUGE; Count version is not
        - pattern: kafka.server<type=(.+), name=(.+), clientId=(.+), brokerHost=(.+), brokerPort=(.+)><>Value
          name: kafka_server_$1_$2
          type: GAUGE
          labels:
            clientId: "$3"
            broker: "$4:$5"
        - pattern: kafka.server<type=(.+), name=(.+), clientId=(.+), brokerHost=(.+), brokerPort=(.+)><>Count
          name: kafka_server_$1_$2
          labels:
            clientId: "$3"
            broker: "$4:$5"
        # Needed for Cluster Linking metrics
        # "kafka.server:type=*, name=*, *=*, *=*, *=*, *=*"
        - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+), (.+)=(.+), (.+)=(.+), (.+)=(.+)><>(Count|Value)
          name: kafka_$1_$2_$3
          labels:
            "$4": "$5"
            "$6": "$7"
            "$8": "$9"
            "$10": "$11"
        # "kafka.server:type=*, name=*, *=*, *=*, *=*"
        - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+), (.+)=(.+), (.+)=(.+)><>(Count|Value)
          name: kafka_$1_$2_$3
          labels:
            "$4": "$5"
            "$6": "$7"
            "$8": "$9"
        # "kafka.network:type=*, name=*, request=*, error=*"
        # "kafka.network:type=*, name=*, request=*, version=*"
        - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+), (.+)=(.+)><>(Count|Value)
          name: kafka_$1_$2_$3
          labels:
            "$4": "$5"
            "$6": "$7"
        - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.*), (.+)=(.+)><>(\d+)thPercentile
          name: kafka_$1_$2_$3
          type: GAUGE
          labels:
            "$4": "$5"
            "$6": "$7"
            quantile: "0.$8"
        # "kafka.rest:type=*, topic=*, partition=*, client-id=*"
        # "kafka.rest:type=*, cipher=*, protocol=*, client-id=*"
        - pattern: kafka.(\w+)<type=(.+), (.+)=(.+), (.+)=(.+), (.+)=(.+)><>Value
          name: kafka_$1_$2
          labels:
            "$3": "$4"
            "$5": "$6"
            "$7": "$8"
        # Count and Value
        # "kafka.server:type=*, name=*, topic=*"
        # "kafka.server:type=*, name=*, clientId=*"
        # "kafka.server:type=*, name=*, delayedOperation=*"
        # "kafka.server:type=*, name=*, fetcherType=*"
        # "kafka.network:type=*, name=*, networkProcessor=*"
        # "kafka.network:type=*, name=*, processor=*"
        # "kafka.network:type=*, name=*, request=*"
        # "kafka.network:type=*, name=*, listener=*"
        # "kafka.log:type=*, name=*, logDirectory=*"
        # "kafka.log:type=*, name=*, op=*"
        # "kafka.rest:type=*, node-id=*, client-id=*"
        - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+)><>(Count|Value)
          name: kafka_$1_$2_$3
          labels:
            "$4": "$5"
        # "kafka.consumer:type=*, topic=*, client-id=*"
        # "kafka.producer:type=*, topic=*, client-id=*"
        # "kafka.rest:type=*, topic=*, client-id=*"
        # "kafka.server:type=*, broker-id=*, fetcher-id=*"
        # "kafka.server:type=*, listener=*, networkProcessor=*"
        - pattern: kafka.(\w+)<type=(.+), (.+)=(.+), (.+)=(.+)><>(Count|Value)
          name: kafka_$1_$2
          labels:
            "$3": "$4"
            "$5": "$6"
        # - pattern: "kafka.(.+)<type=(.+), (.+)=(.+), (.+)=(.+)><>(.+):"
        #   name: kafka_$1_$2
        #   labels:
        #     "$3": "$4"
        #     "$5": "$6"
        #     attribute_name: "$7"
        # "kafka.network:type=*, name=*"
        # "kafka.server:type=*, name=*"
        # "kafka.controller:type=*, name=*"
        # "kafka.databalancer:type=*, name=*"
        # "kafka.log:type=*, name=*"
        # "kafka.utils:type=*, name=*"
        - pattern: kafka.(\w+)<type=(.+), name=(.+)><>(Count|Value)
          name: kafka_$1_$2_$3
        # "kafka.producer:type=*, client-id=*"
        # "kafka.producer:type=*, id=*"
        # "kafka.rest:type=*, client-id=*"
        # "kafka.rest:type=*, http-status-code=*"
        # "kafka.server:type=*, BrokerId=*"
        # "kafka.server:type=*, listener=*"
        # "kafka.server:type=*, id=*"
        - pattern: kafka.(\w+)<type=(.+), (.+)=(.+)><>Value
          name: kafka_$1_$2
          labels:
            "$3": "$4"
        # - pattern: "kafka.(.+)<type=(.+), (.+)=(.+)><>(.+):"
        #   name: kafka_$1_$2
        #   labels:
        #     "$3": "$4"
        #     attribute_name: "$5"
        - pattern: kafka.server<type=KafkaRequestHandlerPool, name=RequestHandlerAvgIdlePercent><>OneMinuteRate
          name: kafka_server_kafkarequesthandlerpool_requesthandleravgidlepercent_total
          type: GAUGE
        # "kafka.server:type=*, listener=*, networkProcessor=*, clientSoftwareName=*, clientSoftwareVersion=*"
        - pattern: kafka.server<type=socket-server-metrics, clientSoftwareName=(.+), clientSoftwareVersion=(.+), listener=(.+), networkProcessor=(.+)><>connections
          name: kafka_server_socketservermetrics_connections
          type: GAUGE
          labels:
            client_software_name: "$1"
            client_software_version: "$2"
            listener: "$3"
            network_processor: "$4"
        - pattern: "kafka.server<type=socket-server-metrics, listener=(.+), networkProcessor=(.+)><>(.+):"
          name: kafka_server_socketservermetrics_$3
          type: GAUGE
          labels:
            listener: "$1"
            network_processor: "$2"
        # - pattern: "kafka.server<type=socket-server-metrics, listener=(.+)><>(.+):"
        #   name: kafka_server_socketservermetrics
        #   type: GAUGE
        #   labels:
        #     listener: "$1"
        #     attribute_name: "$2"
        # "kafka.coordinator.group:type=*, name=*"
        # "kafka.coordinator.transaction:type=*, name=*"
        - pattern: kafka.coordinator.(\w+)<type=(.+), name=(.+)><>(Count|Value)
          name: kafka_coordinator_$1_$2_$3
        # Percentile
        - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.*)><>(\d+)thPercentile
          name: kafka_$1_$2_$3
          type: GAUGE
          labels:
            "$4": "$5"
            quantile: "0.$6"
        - pattern: kafka.(\w+)<type=(.+), name=(.+)><>(\d+)thPercentile
          name: kafka_$1_$2_$3
          type: GAUGE
          labels:
            quantile: "0.$4"
        # Additional Rules for Confluent Server Metrics
        # 'confluent.metadata:type=*, name=*, topic=*, partition=*'
        - pattern: confluent.(\w+)<type=(.+), (.+)=(.+), (.+)=(.+), (.+)=(.+)><>(Value|Count)
          name: confluent_$1_$2
          type: GAUGE
          labels:
            "$3": "$4"
            "$5": "$6"
            "$7": "$8"
        # 'confluent.metadata.service:type=*, node-id=*, client-id=*'
        - pattern: confluent.(.+)<type=(.+), (.+)=(.+), (.+)=(.+)><>Value
          name: confluent_$1_$2
          type: GAUGE
          labels:
            "$3": "$4"
            "$5": "$6"
        # 'confluent.metadata.service:type=*, node-id=*, client-id=*'
        - pattern: 'confluent.metadata.service<type=(.+), (.+)=(.+), (.+)=(.+)><>(.+):'
          name: $1
          type: GAUGE
          labels:
            "$2": "$3"
            "$4": "$5"
            attribute_name: "$6"
        # 'confluent.metadata.service:type=*, client-id=*'
        # 'confluent.metadata.service:type=*, id=*'
        # 'confluent.metadata:type=*, name=*'
        # 'confluent.license:type=*, name=*'
        - pattern: confluent.(.+)<type=(.+), (.+)=(.+)><>Value
          name: confluent_$1_$2
          type: GAUGE
          labels:
            "$3": "$4"
        - pattern: 'confluent.(.+)<type=(.+), (.+)=(.+)><>(.+):'
          name: confluent_$1_$2
          type: GAUGE
          labels:
            "$3": "$4"
            attribute_name: "$5"
        # Quotas
        - pattern: 'kafka.server<type=(Produce|Fetch|Request), user=(.+), client-id=(.+)><>(.+):'
          name: kafka_server_$1_$4
          type: GAUGE
          labels:
            user: "$2"
            client-id: "$3"

        - pattern: 'kafka.server<type=(Produce|Fetch|Request), user=(.+)><>(.+):'
          name: kafka_server_$1_$3
          type: GAUGE
          labels:
            user: "$2"

        - pattern: 'kafka.server<type=(Produce|Fetch|Request), client-id=(.+)><>(.+):'
          name: kafka_server_$1_$3
          type: GAUGE
          labels:
            client-id: "$2"

        # Broker  Metrics
        - pattern: 'kafka.server<type=BrokerTopicMetrics, name=(MessagesInPerSec|BytesInPerSec|BytesOutPerSec|TotalProduceRequestsPerSec|TotalFetchRequestsPerSec), topic=(.+)><>(Count|OneMinuteRate|FiveMinuteRate|FifteenMinuteRate)'
          name: kafka_server_brokertopicmetrics_$1_$3
          type: GAUGE
          labels:
            topic: "$2"

        - pattern: 'kafka.server<type=BrokerTopicMetrics, name=(MessagesInPerSec|BytesInPerSec|BytesOutPerSec)><>(Count|OneMinuteRate|FiveMinuteRate|FifteenMinuteRate)'
          name: kafka_server_brokertopicmetrics_$1_$2_alltopics
          type: GAUGE

        # Network Request  Metrics
        - pattern: 'kafka.network<type=RequestMetrics, name=RequestsPerSec, request=(.+), version=([0-9]+)><>(Count|OneMinuteRate|FiveMinuteRate|FifteenMinuteRate)'
          name: kafka_network_requestmetrics_requestspersec_$3
          type: GAUGE
          labels:
            request: "$1"
{{- end }}
