# https://developer.confluent.io/courses/architecture/control-plane/#kraft-cluster-node-roles
# Sounds like KRaft can either be run in dedicated or shared mode
# CfK seems to always use dedicated mode (since they are configured separately and spawn their own pods)

apiVersion: platform.confluent.io/v1beta1
kind: KRaftController
metadata:
  name: kraft-poc
  namespace: {{ .Values.namespace }}
spec:
  replicas: {{ .Values.kraft.replicas }}
  image:
    application: {{ .Values.images.kraftControllerApplication }}
    init: {{ .Values.images.init }}
  dataVolumeCapacity: {{ .Values.kraft.dataVolumeCapacity }}
  podTemplate:
    labels:
      app.kubernetes.io/part-of: kafka-poc
    podSecurityContext:
      runAsUser: 1001760001
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 100m
        memory: 512Mi
---
apiVersion: platform.confluent.io/v1beta1
kind: Kafka
metadata:
  name: {{ .Values.kafka.name }}
  namespace: {{ .Values.namespace }}
spec:
{{/*  storageClass:*/}}
{{/*    name: ocs-storagecluster-ceph-rbd*/}}
  replicas: {{ .Values.kafka.replicas }}
  image:
    application: {{ .Values.images.cpServer }}
    init: {{ .Values.images.init }}
{{/*  license:*/}}
{{/*    secretRef: confluent-license*/}}
  dataVolumeCapacity: {{ .Values.kafka.dataVolumeCapacity }}
  podTemplate:
    labels:
      app.kubernetes.io/part-of: kafka-poc
    podSecurityContext:
      runAsUser: 1001760001
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 100m
        memory: 512Mi
  configOverrides:
    server:
      - "confluent.metrics.topic.retention.ms=3600000"
      - "--metric.reporters=io.confluent.metrics.reporter.ConfluentMetricsReporter"
  tls:
    secretRef: tls-group1
  listeners:
      internal:
        authentication:
          type: ldap
          jaasConfig:
            secretRef: credentials
        tls:
          enabled: true
      external:
        externalAccess:
          type: nodePort
          nodePort:
            host: localhost
            nodePortOffset: 30000
        authentication:
          type: ldap
          jaasConfig:
            secretRef: credentials
        tls:
          enabled: true
  identityProvider:
    type: ldap
    ldap:
      address: ldap://ldap-service.openldap-demo.svc.cluster.local:389
      authentication:
        type: simple
        simple:
          secretRef: credentials
      configurations:
        groupNameAttribute: cn
        groupObjectClass: group
        groupMemberAttribute: member
        groupMemberAttributePattern: CN=(.*),OU=groups,DC=example,DC=org
        groupSearchBase: ou=groups,dc={{ .Values.ldap.dc2 }},dc={{ .Values.ldap.dc1 }}
        userNameAttribute: cn
        userMemberOfAttributePattern: CN=(.*),DC=example,DC=org
        userObjectClass: organizationalRole
        userSearchBase: dc={{ .Values.ldap.dc2 }},dc={{ .Values.ldap.dc1 }}
  authorization:
    type: rbac
    superUsers:
      - User:kafka
  services:
    kafkaRest:
      externalAccess:
        type: nodePort
        nodePort:
          host: localhost
          nodePortOffset: 30100
  dependencies:
    kafkaRest:
      bootstrapEndpoint: {{ .Values.kafka.name }}.{{ .Values.namespace }}.svc.cluster.local:9071
      authentication:
        type: bearer
        bearer:
          secretRef: mds-client
